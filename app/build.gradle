
plugins {
    id 'groovy'
    id 'application'
}

repositories {
    mavenCentral()
}

version '1.0.0'

dependencies {
    // Groovy
    implementation 'org.codehaus.groovy:groovy:3.0.7'

    // Discord
    implementation group: 'net.dv8tion', name: 'JDA', version: '5.0.0-beta.19'

    // JSON
    def jackson_version = '2.16.1'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: jackson_version
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: jackson_version
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jackson_version
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: jackson_version

    // Misc
    implementation 'com.google.guava:guava:29.0-jre'

    def httpcomponents_version = '4.5.14'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: httpcomponents_version

    // Logging
    def slf4j_version = '2.0.7'
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: slf4j_version
    implementation group: 'org.slf4j', name: 'slf4j-api', version: slf4j_version
    implementation group: 'org.slf4j', name: 'slf4j-ext', version: slf4j_version

    // Logger Runtime
    def log4j_version = '2.17.1'
    runtimeClasspath group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: log4j_version
    runtimeClasspath group: 'org.apache.logging.log4j', name: 'log4j-1.2-api', version: log4j_version
    runtimeClasspath group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4j_version
    runtimeClasspath group: 'org.apache.logging.log4j', name: 'log4j-core', version: log4j_version

    // Test
    testImplementation 'org.spockframework:spock-core:2.2-groovy-3.0'
    testImplementation 'junit:junit:4.13'
}

application {
    // Define the main class for the application.
    mainClass = 'org.tavern.mangachan.app.App'
}

jar {
    manifest {
        attributes 'Main-Class': application.mainClass
    }
    baseName 'manga-chan'
    archiveName = "${baseName}.${jar.extension}"
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
    new File(jar.destinationDir , "/manga-chan-${version}").mkdir()
    destinationDir = new File(jar.destinationDir , "/manga-chan-${version}")

}
